/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.2/userguide/custom_plugins.html
 */
plugins {
    // Add support for compiling Groovy projects
    id 'groovy'
    // Automatic version number generation
    id "nebula.release" version "17.2.2"
    // Test coverage tools
    id 'jacoco'
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
}
repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}
def junitVersion = "5.8.1"

dependencies {
    // https://mvnrepository.com/artifact/org.spockframework/spock-core
    // Dependencies required by test framework
    testImplementation group: 'org.spockframework', name: 'spock-core', version: '2.4-M1-groovy-3.0'
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.platform:junit-platform-testkit:1.10+"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter:${junitVersion}"


    // Use the latest Groovy version for building this library
    implementation 'org.codehaus.groovy:groovy-all:3.0.17'
    // Needed for the Spock plugin
    implementation ("org.spockframework:spock-core:2.0-groovy-3.0")
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.4.7'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.7'

}

group = 'ca.thefriendlycoder'


// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//                                                              Jacoco Config
test {
    // run coverage report after test run
    finalizedBy jacocoTestReport
}
check {
    // Make sure to validate our test coverage on each build
    dependsOn jacocoTestCoverageVerification
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        // Enable XML output as required by CodeCove.io
        xml.required = true
    }
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                // overall / average code coverage
                minimum = 0.9
            }
        }
//        rule {
//            element = 'CLASS'
//            limit {
//                // each class should have at least this coverage
//                minimum = 0.9
//            }
//        }
    }
}
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=


test {
    useJUnitPlatform()
    exclude '**/*SampleTest*'
}