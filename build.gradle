/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.2/userguide/custom_plugins.html
 */
plugins {
    // Apply the Plugin Publish plugin to make plugin publication possible.
    // The Plugin Publish plugin will in turn auto-apply the Gradle Plugin
    // Development Plugin (java-gradle-plugin) and the Maven Publish plugin
    // (maven-publish).
    // https://docs.gradle.org/current/userguide/java_gradle_plugin.html
    //id 'com.gradle.plugin-publish' version '1.2.0'

    // Add support for compiling Groovy projects
    id 'groovy'
    // Automatic version number generation
    id "nebula.release" version "17.2.2"
    // Test coverage tools
    id 'jacoco'
}
repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}
def junitVersion = "5.8.1"

dependencies {
    // Specify that our plugin requires Spock v2.0 with compatible build for Groovy 3.0
    // without actually providing an explicit dependency on just one version.
    // TBD: this should trigger an error if someone tries to enable our plugin without also
    //      including Spock and Groovy dependencies
    //api platform("org.spockframework:spock-bom:2.0-groovy-3.0")

    // Dependencies needed by the production code
    implementation ("org.spockframework:spock-core:2.0-groovy-3.0")
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.4.7'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.7'

    // Dependencies required by test framework
    testImplementation group: 'org.spockframework', name: 'spock-core', version: '2.4-M1-groovy-3.0'
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testImplementation "org.junit.platform:junit-platform-testkit:1.10+"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter:${junitVersion}"

    // TODO: find some way to inject this into the embedded spock runner
    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.4.7'
    testImplementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.7'
}

group = 'ca.thefriendlycoder'

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//                                                       Gradle Plugin Config
//gradlePlugin {
//    // Define the plugin
//    website = 'https://github.com/TheFriendlyCoder/SpockPerTestLogger'
//    vcsUrl = 'https://github.com/TheFriendlyCoder/SpockPerTestLogger'
//    plugins {
//        SpockPerTestLoggerPlugin {
//            id = "${group}.spockpertestlogger"
//            displayName = 'Spock Per-Test Logger Plugin'
//            description = 'Spock extension that stores log output for each test in its own file on disk.'
//            implementationClass = "${group}.spockpertestlogger.SpockPerTestLoggerPlugin"
//            tags.set(['spock', 'spock framework', 'groovy', 'java', 'testing', 'test', 'logging', 'log', 'thefriendlycoder', 'tfc'])
//        }
//    }
//}
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//                                                      Functional Test Suite
sourceSets {
    functionalTest {
        groovy.srcDir "$projectDir/src/functionalTest/groovy"
        //resources.srcDir "$projectDir/src/functionalTest/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

//gradlePlugin.testSourceSets(sourceSets.functionalTest)

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

tasks.named('test') {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//                                                              Jacoco Config
test {
    // run coverage report after test run
    finalizedBy jacocoTestReport
}
check {
    // Make sure to validate our test coverage on each build
    dependsOn jacocoTestCoverageVerification
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        // Enable XML output as required by CodeCove.io
        xml.required = true
    }
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                // Fail build if code coverage is below this percentage
                minimum = 0.1
            }
        }
//        rule {
//            element = 'CLASS'
//            limit {
//                // Require each class to have at least 40% coverage
//                // independent of the total coverage
//                minimum = 0.4
//            }
//        }
    }
}
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=