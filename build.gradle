/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.2/userguide/custom_plugins.html
 */
plugins {
    // Apply the Plugin Publish plugin to make plugin publication possible.
    // The Plugin Publish plugin will in turn auto-apply the Gradle Plugin
    // Development Plugin (java-gradle-plugin) and the Maven Publish plugin
    // (maven-publish).
    // https://docs.gradle.org/current/userguide/java_gradle_plugin.html
    id 'com.gradle.plugin-publish' version '1.2.0'

    // Add support for compiling Groovy projects
    id 'groovy'
    // Automatic version number generation
    id "nebula.release" version "17.2.2"
    // Test coverage tools
    id 'jacoco'
}
repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}
dependencies {
    // Use the awesome Spock testing and specification framework
    testImplementation 'org.spockframework:spock-core:2.2-groovy-3.0'
}

group = 'ca.thefriendlycoder'

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//                                                       Gradle Plugin Config
gradlePlugin {
    // Define the plugin
    website = 'https://github.com/TheFriendlyCoder/SpockPerTestLogger'
    vcsUrl = 'https://github.com/TheFriendlyCoder/SpockPerTestLogger'
    plugins {
        SpockPerTestLoggerPlugin {
            id = 'ca.thefriendlycoder.spockpertestlogger'
            displayName = 'Spock Per-Test Logger Plugin'
            description = 'Spock extension that stores log output for each test in its own file on disk.'
            implementationClass = 'ca.thefriendlycoder.spockpertestlogger.SpockPerTestLoggerPlugin'
            tags.set(['spock', 'testing', 'logging', 'log'])
        }
    }
}
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//                                                      Functional Test Suite
sourceSets {
    functionalTest {
    }
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

tasks.named('test') {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//                                                              Jacoco Config
test {
    // run coverage report after test run
    finalizedBy jacocoTestReport
}
check {
    // Make sure to validate our test coverage on each build
    dependsOn jacocoTestCoverageVerification
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        // Enable XML output as required by CodeCove.io
        xml.required = true
    }
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                // Require at least 80% coverage overall
                minimum = 0.8
            }
        }
        rule {
            element = 'CLASS'
            limit {
                // Require each class to have at least 40% coverage
                // independent of the total coverage
                minimum = 0.4
            }
        }
    }
}
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=