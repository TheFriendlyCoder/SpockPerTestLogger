/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.2/userguide/custom_plugins.html
 */
plugins {
    // Add support for compiling Groovy projects
    id 'groovy'
    // Automatic version number generation
    id "nebula.release" version "17.2.2"
    // Test coverage tools
    id 'jacoco'
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    // automatic code formatting
    id "com.diffplug.spotless" version "6.19.0"
    // sign our deliverables as required by Maven Central
    // https://central.sonatype.org/publish/publish-gradle/
    id 'signing'
    id 'maven-publish'
}
repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//                                                                Global Defs
def junitVersion = "5.8.1"
group = 'ca.thefriendlycoder'

// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//                                                               Dependencies
dependencies {
    // https://mvnrepository.com/artifact/org.spockframework/spock-core
    // Dependencies required by test framework
    testImplementation group: 'org.spockframework', name: 'spock-core', version: '2.4-M1-groovy-3.0'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitVersion
    testImplementation group: 'org.junit.platform', name: 'junit-platform-testkit', version: '1.10+'
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter', version: junitVersion


    // Use the latest Groovy version for building this library
    implementation group: 'org.codehaus.groovy', name: 'groovy-all', version: '3.0.17'

    // Needed for the Spock plugin
    implementation group: 'org.spockframework', name: 'spock-core', version: '2.0-groovy-3.0'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.4.7'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.7'

}


// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//                                                                    Testing
test {
    useJUnitPlatform()
    exclude '**/samples/**'
    // run coverage report after test run
    finalizedBy jacocoTestReport
}
check {
    // Make sure to validate our test coverage on each build
    dependsOn jacocoTestCoverageVerification
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        // Enable XML output as required by CodeCove.io
        xml.required = true
    }
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                // overall / average code coverage
                minimum = 0.9
            }
        }
//        rule {
//            element = 'CLASS'
//            limit {
//                // each class should have at least this coverage
//                minimum = 0.9
//            }
//        }
    }
}
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//                                                            Code Formatting
spotless {
    groovy {
        // Use the default importOrder configuration
        importOrder()
        trimTrailingWhitespace()
        indentWithSpaces()
    }
    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '*.md', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces()
        endWithNewline()
    }
    java {

        // apply a specific flavor of google-java-format
        googleJavaFormat().aosp().reflowLongStrings()
        // fix formatting of type annotations
        formatAnnotations()
    }
}
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
//                                                   Maven Central Publishing
java {
    // Publish API docs and debug sources
    withJavadocJar()
    withSourcesJar()
}
// Publish HTML formatted docs
javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
signing {
    sign configurations.archives
    //sign publishing.publications.mavenJava
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'SpockPerTestLogger'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Spock Per-Test Logger'
                description = 'Extension for the Spock testing framework that captures log output from each test feature and serializes it to disk. Each test will produce a separate log file.'
                url = 'https://github.com/TheFriendlyCoder/SpockPerTestLogger'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'kevinp'
                        name = 'Kevin Phillips'
                        email = 'kevin@thefriendlycoder.com'
                    }
                }
                scm {
                    connection = 'git@github.com:TheFriendlyCoder/SpockPerTestLogger.git'
                    developerConnection = 'git@github.com:TheFriendlyCoder/SpockPerTestLogger.git'
                    url = 'https://github.com/TheFriendlyCoder/SpockPerTestLogger'
                }
            }
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
//            def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
//            def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def isSnapshot = version.toString().contains('uncommitted') || version.toString.endsWith('SNAPSHOT')
            url = isSnapshot ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}


